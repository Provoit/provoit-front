# Simple workflow for deploying static content to GitHub Pages
name: Deploy dioxus build to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: Frontend
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Rustup wasm target
        run: rustup target add wasm32-unknown-unknown

      # Cache .cargo to avoid installing dioxus-cli
      - name: Dioxus cli cache
        id: cache-dioxus-cli
        uses: actions/cache@v3
        env:
          cache-name: cache-dioxus-cli
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo

      # Install dioxus cli if cache misses
      - name: Dioxus cli install
        if: ${{ steps.cache-dioxus-cli.outputs.cache-hit != 'true' }}
        run: cargo install dioxus-cli

      - name: Build
        run: dioxus build --release --platform web

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

